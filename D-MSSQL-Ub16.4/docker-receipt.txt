# Source: https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-2017


bash: 

# Pull the SQL Server 2017 Linux container image from Microsoft Container Registry.
# to pull a specific image, you add a colon and the tag name 
# (for example, mcr.microsoft.com/mssql/server:2017-GA-ubuntu
sudo docker pull mcr.microsoft.com/mssql/server:2017-latest

# install MSSQL 
sudo docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=<YourStrong!Passw0rd>' \
   -p 1433:1433 --name sql1 \
   -d mcr.microsoft.com/mssql/server:2017-latest

# view the docker container:
sudo docker ps -a


#Change the SA password
# The SA account is a system administrator on the SQL Server instance that gets created during setup. 
# After creating your SQL Server container, the MSSQL_SA_PASSWORD environment variable you specified is 
# discoverable by running echo $MSSQL_SA_PASSWORD in the container. For security purposes, change your SA password.
# Choose a strong password to use for the SA user.
# Use docker exec to run sqlcmd to change the password using Transact-SQL. 
# Replace <YourStrong!Passw0rd> and <YourNewStrong!Passw0rd> with your own password values.
sudo docker exec -it sql1 /opt/mssql-tools/bin/sqlcmd \
   -S localhost -U SA -P '<YourStrong!Passw0rd>' \
   -Q 'ALTER LOGIN SA WITH PASSWORD="<YourNewStrong!Passw0rd>"'

# The following steps use the SQL Server command-line tool, sqlcmd, inside the container to connect to SQL Server.
# Use the docker exec -it command to start an interactive bash shell inside your running container. 
# In the following example sql1 is name specified by the --name parameter when you created the container.
# Once inside the container, connect locally with sqlcmd. 
# Sqlcmd is not in the path by default, so you have to specify the full path.
/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P '<YourNewStrong!Passw0rd>'

#Tip
#You can omit the password on the command-line to be prompted to enter it.
If successful, you should get to a sqlcmd command prompt: 1>.
sudo docker exec -it sql1 "bash"

#Create and query data
#The following sections walk you through using sqlcmd and Transact-SQL to create a new database, add data, and run a simple query.
#Create a new database
#The following steps create a new database named TestDB.
#From the sqlcmd command prompt, paste the following Transact-SQL command to create a test database:
# SQL 
CREATE DATABASE TestDB

# On the next line, write a query to return the name of all of the databases on your server:
# SQL
SELECT Name from sys.Databases

#The previous two commands were not executed immediately. You must type GO on a new line to execute the previous commands:
# SQL
GO

#Insert data
#Next create a new table, Inventory, and insert two new rows.
#From the sqlcmd command prompt, switch context to the new TestDB database:
# SQL 
USE TestDB

# Create new table named Inventory:
#SQL
CREATE TABLE Inventory (id INT, name NVARCHAR(50), quantity INT)

#Insert data into the new table:
# SQL
INSERT INTO Inventory VALUES (1, 'banana', 150); INSERT INTO Inventory VALUES (2, 'orange', 154);
#Type GO to execute the previous commands:
# SQL
GO

# Select data
# Now, run a query to return data from the Inventory table.
# From the sqlcmd command prompt, enter a query that returns rows from the Inventory table where the quantity is greater than 152:
# SQL 
SELECT * FROM Inventory WHERE quantity > 152;

Execute the command:
SQL

    GO

Exit the sqlcmd command prompt

    To end your sqlcmd session, type QUIT:
    SQL 

    QUIT

    To exit the interactive command-prompt in your container, type exit. Your container continues to run after you exit the interactive bash shell.

Connect from outside the container

You can also connect to the SQL Server instance on your Docker machine from any external Linux, Windows, or macOS tool that supports SQL connections.

The following steps use sqlcmd outside of your container to connect to SQL Server running in the container. These steps assume that you already have the SQL Server command-line tools installed outside of your container. The same principals apply when using other tools, but the process of connecting is unique to each tool.

    Find the IP address for the machine that hosts your container. On Linux, use ifconfig or ip addr. On Windows, use ipconfig.

    Run sqlcmd specifying the IP address and the port mapped to port 1433 in your container. In this example, that is the same port, 1433, on the host machine. If you specified a different mapped port on the host machine, you would use it here.
    bash 

sqlcmd -S 10.3.2.4,1433 -U SA -P '<YourNewStrong!Passw0rd>'

PowerShell

    sqlcmd -S 10.3.2.4,1433 -U SA -P "<YourNewStrong!Passw0rd>"

    Run Transact-SQL commands. When finished, type QUIT.

Other common tools to connect to SQL Server include:

    Visual Studio Code
    SQL Server Management Studio (SSMS) on Windows
    Azure Data Studio (Preview)
    mssql-cli (Preview)

Remove your container

If you want to remove the SQL Server container used in this tutorial, run the following commands:
bash

sudo docker stop sql1
sudo docker rm sql1

PowerShell

docker stop sql1
docker rm sql1


PowerShell: 
docker pull mcr.microsoft.com/mssql/server:2017-latest
